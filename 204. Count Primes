// 1. Initial: O(n^2) -> Time Limit Exceeded
//      When testing if it's a prime, I tried 2~n-1; (classic brute force)
//      Then, eliminate some range -> 2~n/2 -> 2~sqrt(n); yet TLE
//      Further, all primes are of the form 6k+1/6k-1, except 2or3; yet TLE
//      Well, "%" operation may be costly
// 2. Second thought: could do O(n)? could use DP? 
//  yes. There is another efficient method
// 3. Wrong answer: 
//  Question: "less than n", include n?? Yes
public class Solution {
    public int countPrimes(int n) {
        if (n <= 2){
            return 0;
        }
        
        boolean[] nonPrime = new boolean[n];
        nonPrime[0] = true;
        nonPrime[1] = true;
        int count = n-2; 
        for (int i=2; i*i<n; i++){
            if (!nonPrime[i]){
                for (int j=i*i; j<n; j+=i){
                    if (!nonPrime[j]){
                    nonPrime[j] = true;
                    count--;}
                }
            }
        }
        
        
        return count;
           
    }
}
