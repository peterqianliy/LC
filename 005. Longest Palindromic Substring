// Data Structure in Solution
// #1 stack, non-duplicate char put in stack-> those popped out from stack may not equal previous visited char
// #2 stringbuffer  
// #3 For DP, just 2D array

// Possible follow-up: 
// #1 what if more than one longest
// #2 Can you do O(n)

public class Solution {
    public String longestPalindrome(String s) {
        if (s==null || s.isEmpty()) {
            return null;
        }
    
        // int n = s.length();
        String maxString = s.substring(0,1);
        
        for (int i=0; i<s.length();i++){
            // you can't return two indices after each 
            String palString = ""; 
            palString = findPalOnPivot(s, i, i);
            if (palString.length()>maxString.length()){
                maxString = palString;
            }
            palString = findPalOnPivot(s, i, i+1);
            if (palString.length()>maxString.length()){
                maxString = palString;
            }
        }
        return maxString;
    }
    
    public String findPalOnPivot(String s, int l, int r){
        int n = s.length(); // whats s?? Should be the original input
        while (l>=0 && r<=n-1 && s.charAt(l)==s.charAt(r)){
            --l;
            ++r;
        }
        return s.substring(++l, r);
    }
}
