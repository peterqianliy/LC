
/**
 * Input a sorted array rotated at some unknown pivot
 * 
 * 1. Initial: brute force -> may TLE; Not TLE, but way below avg runtime
 * 2. Binary search
 * 3. Failures: consider at least these three shapes 891234567, 123456789, 345678912
 * 
 * Okay, binary search for the pivot point; determine the range and binary search in that range
 */
public class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0){
            return -1; 
        }

        int start = 0; 
        int end = nums.length - 1;
        int mid = 0;

        // Binary search for the smallest element
        while (start < end){
            mid = (start + end)/2; 
            if (nums[mid] > nums[end]){
                start = mid + 1;
            }else {
                end = mid; 
                // end = mid - -1?
            }
        }
        
        int rot = start; 
        start = 0; 
        end = nums.length - 1;
        
        if (rot != 0){
        	if (target >= nums[start]){
        		
        		end = rot - 1;
        	}else if (target <= nums[end]){
        		start = rot;
        		
        	}
        }
  
        while (start <= end){
            mid = (start + end)/2;
            if (target == nums[mid]){
                return mid; 
            }else if (target > nums[mid]){
                start = mid + 1; 
            }else{
                end = mid - 1; 
            }
        }
    
        return -1;
    }
}
