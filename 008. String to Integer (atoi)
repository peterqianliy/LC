/**
 * 
 * Counting from the first non-whitespace character, 
 * to the first non-numerical character, 
 * parse numerical value in between
 * 
 * @author qianliy
 *
 */

// Failures: 
//  #1. understanding of the problem not exact: okay, there is allowed to be letters "  -0012a43"
//  #2. when comparing int vs. long, do formatting? -> it's fine; Rather, in some test cases, range of "long" exceeded
//  #3. compile error: missing return statement. I have return statements for every branch in the end, but compile error...So when exactly does this error happen? 
public class Solution {
    public int myAtoi(String str) {
        if (str==null || str.length()==0){
            return 0;
        }
    
        long sum = 0;
        int flag = 1; 
        int len = 0; 
        
        str = str.trim(); 
        for (int i=0; i<str.length(); i++){
            char ch = str.charAt(i);
            if (i==0){
                if (ch =='-'){
                    flag = -1;
                    continue;
                }else if (ch=='+'){
                    flag = 1; 
                    continue;
                }else if(ch<'0' || ch>'9') { 
                    return 0;
                }else {
                    sum = ch - '0';
                    len++ ; 
                }
             }else{
                if (ch<'0' || ch>'9'){
                    // return 0;
                    // non-numerical char is allow
                    break;
                }else{      
                    sum = sum *10 + (ch - '0');
                    len++;
                }  
            } 
        } 
        
        
        sum = sum * flag;
        
        if (len>10){
            if (flag>0){
                return Integer.MAX_VALUE;
            }else if (flag<0){
                return Integer.MIN_VALUE;
            }
        }else {
        
            
            if (sum > Integer.MAX_VALUE){
                return Integer.MAX_VALUE;
            }else if (sum < Integer.MIN_VALUE){
                return Integer.MIN_VALUE;
            }else{
                return (int)sum;
            }
        }
        // Avoid compile error
        return -1;
    }
}
