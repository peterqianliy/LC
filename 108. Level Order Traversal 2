/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 * 
 * 1. Initial Thought: DFS, using stack 
 * 
 * 2. Reference 
 *      recursion: when you decide a level?? "height" variable for level height
 *      iteration: queue and stack 
 *      
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<List<Integer>> (); 
        if (root == null){
            return rst;
        }
        
        // Stack<TreeNode> s = new Stack<TreeNode> (); 
        Queue<TreeNode> q = new LinkedList<TreeNode> (); 
        q.offer(root); 
        while (!q.isEmpty()){
            int num = q.size();
            List<Integer> level = new ArrayList<Integer> (); 
            for (int i=0; i<num; i++){
                TreeNode tn = q.poll (); 
                level.add (tn.val); 
                if (tn.left != null){
                    q.offer (tn.left);
                }
                if (tn.right != null){
                    q.offer (tn.right);
                }
            }
            rst.add (0, level);
        }
        return rst; 
    }
}
