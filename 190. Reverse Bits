// convert to binary and then reverse --> No, No, directly manipulate the bits: bit shift, bit and, bit or
 
 public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
       int ans = 0; 
       int i=0; 
       while (i<32){
           ans = (ans<<1) | (n&1); 
          n>>=1; // not cylic shift -> will result in n=0
           i++;
       }
        return ans;
    }
}

// Anohter method 
//  public class Solution {
//     // you need treat n as an unsigned value
//     public int reverseBits(int n) {
//         int i=0;
//         int reverseVal =0;
//         while(i<=31){
//             int temp=1<<i;

//             int bitNum=temp&n;

//             if(bitNum!=0){
//                 reverseVal=(reverseVal<<1)+1;
//             }else{
//                 reverseVal=reverseVal<<1;
//             }

//             i++;

//         }

//         return reverseVal;
//     }
// }
