/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 * 
 * Give a binary tree, reutrn the preorder traversal of its nodes' values.
 * 
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer> (); 
        
        if(root == null) return rst; 
        TreeNode p1 = root; 
        while (p1 != null){
            if (p1.left == null){
                rst.add(p1.val); 
                p1 = p1.right; 
            }else {
                TreeNode p2 = p1.left;
                while (p2.right!=null && p2.right!=p1){
                    p2 = p2.right;
                }
                if (p2.right == null){
                    p2.right = p1; 
                    rst.add (p1.val); 
                    p1 = p1.left;
                }else {
                    p1 = p1.right; 
                    //p2.right = null; 
                }
            }
            
        }
        return rst;
    }
    

    
    
    public List<Integer> preorderTraversal_iterativeWithStack(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer> (); 
        if (root == null) return rst; 
        
        Stack<TreeNode> stack = new Stack<TreeNode> (); 
        stack.push (root); 
        
        while (!stack.isEmpty()){
            TreeNode cur = stack.pop(); 
            rst.add (cur.val); 
            if (cur.right!=null){
                stack.push(cur.right);
            }
            if (cur.left!=null){
                stack.push(cur.left);
            }
        }
        return rst;
    }

    //Using definition, root>left subtree>right subtree
    public List<Integer> preorderTraversal_recursive(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer> (); 
        if (root==null){
            return rst; 
        }
        someMethod(root, rst); 
        return rst; 
    }
    
    public void someMethod(TreeNode root, List<Integer> list){
        if (root==null){
            return; 
        }
        list.add (root.val); 
        someMethod (root.left, list);
        someMethod (root.right, list);
        return ;
    }
}
