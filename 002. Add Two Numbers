/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 // Assumptions
 // unknow # of digits
 
 // Failures: 
 // #1 ">10" or ">9"
 // #2 forgot the last carry
 // #3 if last carry 0, can't append it (okay think thoroughly before you do)
 
 // Review Failures: 
 // #1 forgot "l1=l1.next", "l2=l2.next"..
 
// review exercises
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       // "eligibility check"
       if(l1==null||l2==null) return null; 
        
        // initialization
        ListNode dummy = new ListNode(0); 
        ListNode head = dummy; 
        int carry = 0; 
        
        // go
        while (l1!=null&&l2!=null){
            int sum = l1.val + l2.val + carry; 
            carry = (sum>9)? 1: 0; 
            sum = (sum>9)? sum-10: sum; 
            // head.next = new ListNode(sum); 
            ListNode curr = new ListNode(sum);
            // head = head.next; 
            head.next = curr; 
            head = head.next;
            l1=l1.next; 
            l2=l2.next;
        }
        ListNode ll = (l1!=null)? l1 :l2; 
        while(ll!=null){
            int sum =  ll.val + carry; 
            carry = (sum>9)? 1: 0; 
            sum = (sum>9)? sum-10: sum; 
            head.next= new ListNode(sum); 
            ListNode curr = new ListNode(sum); 
            head.next = curr; 
            head = head.next; 
            ll=ll.next;
        }
        ListNode end = new ListNode(carry);
        head.next =(carry!=0)? end: null;
        return dummy.next; 
        
    }
}
