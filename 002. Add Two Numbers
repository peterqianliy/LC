/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 // Assumptions
 // unknow # of digits
 
 // Failures: 
 // #1 ">10" or ">9"
 // #2 forgot the last carry
 // #3 if last carry 0, can't append it (okay think thoroughly before you do)
 
 // Review Failures: 
 // #1 forgot "l1=l1.next", "l2=l2.next"..
 // #2 temp not initialized: you should know the lifecylcle of a variable 
 
// review exercise
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode dummy = new ListNode(0);
        ListNode head = dummy; 
        int carry = 0; 
        
        while (l1!=null && l2!=null){
            int sum = l1.val + l2.val + carry; 
            carry = (sum>9)? 1: 0; 
            sum = (sum>9)? sum-10 : sum; 
            ListNode temp = new ListNode(sum); 
            head.next = temp; 
            head = head.next; 
            l1 = l1.next; 
            l2 = l2.next;
        }
        ListNode ll = (l1 != null)? l1:l2; 
        while (ll != null){
            int sum = ll.val + carry;
            carry = (sum>9)? 1: 0; 
            sum = (sum>9)? sum-10 : sum; 
            ListNode temp = new ListNode(sum); 
            head.next = temp; 
            head = head.next; 
            ll = ll.next;
        }    
        if (carry == 1){
            ListNode temp = new ListNode (carry); 
            head.next = temp; 
        }
        return dummy.next; 
        
        
    }
}
