/* Given a 2D grid (1s and 0s). Count the number of the adjacent lands
* 
* For example:
* {[1,1,1], [0,0,0],[1,1,1]} returns 2
* 
* Solution: 
* 1. DFS: iterate through each element; 0 as visited
*
* History:
* 01/16 DFS 4ms 41.15%
* 01/16 DFS 3ms 64.30% - check if arr[x][y]==1 before/outside function call
*/

public class Solution {
    public int numIslands(char[][] grid) {
        int rst = 0; 
        if (grid==null || grid.length==0 || grid[0].length==0) {
            return 0;
        }
        
        // Loop through each element
        for (int i=0; i<grid.length; i++) {
            for (int j=0; j<grid[0].length; j++) {
                // Mark +1 as -1 after visited
                if (grid[i][j] == '1'){
                    rst++; 
                    search (i, j, grid);    
                }
            }
        }
        return rst; 
    }
    
    public void search (int x, int y, char[][] arr) {
        arr[x][y] = '0'; 
        
        if (x < arr.length-1 && arr[x+1][y] == '1') {
            search (x+1, y, arr); 
        }
        
        if (x > 0 && arr[x-1][y] == '1') {
            search (x-1, y, arr);
        }
        
        if (y < arr[0].length-1 && arr[x][y+1] == '1') {
            search (x, y+1, arr); 
        }
        
        if (y > 0 && arr[x][y-1] == '1') {
            search (x, y-1, arr); 
        }
        return;
    }
}
