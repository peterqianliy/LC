/*
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true
*/

consider: 
1. s[i]=p[j] match
2. s[i]!=p[j] 
  2.1 p[j]="." match
  2.2 p[j]!="." 


Solution brainstorming/gethering
1. DFS: http://yucoding.blogspot.com/2013/12/leetcode-question-regular-expression.html
this explains how it's different than Wild card matching 
2. DP: like Minimum Edit Distance 
state:dp[i][j] represent s[0: i-1] matches p[0:j-1]

another DP: http://blog.csdn.net/linhuanmars/article/details/21145563
1. think of problem - brute force first, it's a recursion!
2. optimize your code - DP stores results for next step, so DP!
3. dp[i][j] represnet if s[0:i-1] matches p[0:j-1] 
try to find dp[i][j] state transition equation!
4. anthor thought: two strings - which one is the outer loop? 

Questions remain: 
1. what if I miss any other components in the equation? For example, 
my conclusion is dp[i][j] = dp[i][j-1] && dp[i-1][j]. Why do you prove it's 
not dp[i][j] = dp[i][j-1] && dp[i-1][j] || dp[i-3][j+2]??? 
In ohter words, how to prove the transition equation is "complete" 

2. when actually writing the code 
1) which is the outer loop 
2) the beginning and ending indices - for dp arrays, what does it mean by a cell index 

Take notes from the comments on the exercises


public class Solution {
    public boolean isMatch(String s, String p) {
        if (s==null || p==null){
            return false; 
        }else if (s.length()==0 && p.length()==0){
            return true;
        }
        
        int m = s.length(); 
        int n = p.length(); 
        
        boolean[][] dp = new boolean[m+1][n+1];
        dp[0][0] = true;
        //dp[0][1] = (p.charAt(0)=='.'||p.charAt(0)=='*')? true: false; 
        //dp[1][1] = (p.charAt(0)=='.'||p.charAt(0)==s.charAt(0))? true: false;
        
        
        for (int i = 0; i < p.length(); i++) {
            if (p.charAt(i) == '*' && dp[0][i-1]) {
                dp[0][i+1] = true;
            }
        }
        //why this part above? 

        
        // loop - for populating the array, index from 0~i, length=i+1
        // or looping through two arrays
        for (int j=0; j<n; j++){
            for (int i=0; i<m; i++){
                
                if (p.charAt(j)!='*'){
                    dp[i+1][j+1] = dp[i][j]&& (p.charAt(j)=='.'||(p.charAt(j)==s.charAt(i))); 
                     
                    
                }else {
                    if (p.charAt(j-1)=='.' || (p.charAt(j-1)==s.charAt(i))){
                        dp[i+1][j+1] = dp[i][j-1] || dp[i][j+1] || dp[i+1][j-1];
                        //                     why not dp[i][j]    why this item?
                        
                    }else{
                        dp[i+1][j+1] = dp[i+1][j-1] ; 
                    }                    
                }
                
                
               
                
            }
        }
        
        return dp[m][n]; 
        
    }
}
