class Solution {
    
    int count; 
    
    public int uniquePathsIII(int[][] grid) {
        if (grid == null || grid.length==0 || grid[0]==null || grid[0].length ==0) {
            return 0; 
        }
        int m = grid.length; 
        int n = grid[0].length; 
        count = 0; 
            
        // find starting point 
        // start: x, y. startEnd[0][0], [0][1]
        // end : x1, y1 startEnd[1][0], [1][1]
        int[][] se = findStartEnd(grid); 
        boolean[][] visited = new boolean[m][n]; 
        
        dfs(grid, visited, se[2][0]+1, se[0][0], se[0][1]);     
        
        return count;    
    }
    
    // 1. can chagne the original matrix? 
    // 
    private void dfs (int[][] grid, boolean[][] visited, int zeroCount, int x, int y) {                
        
        if (x >= grid.length || y>=grid[0].length || x<0 || y<0) {
            return;
        }
        
        if (grid[x][y] == -1) {
            return;
        }
        
        if (visited[x][y]) {
            return;
        }                
        
        if (grid[x][y] == 2) {
            if (zeroCount == 0) {                            
                count ++;                 
            }   
            return;
        }
        
        // process
        visited[x][y] = true;
        
        
        dfs(grid, visited, zeroCount-1,  x+1, y);
        
        dfs(grid, visited, zeroCount-1,  x-1, y);
        
        dfs(grid, visited, zeroCount-1,  x, y+1);
        
        dfs(grid, visited, zeroCount-1,  x, y-1);
        
        // reset status and return control to upper level
        visited[x][y] = false;
    }
    
    
    //  O(m*n)
    // count the number of zeros 
    // start x, y
    // end x1, y1
    // count n of 0s
    private int[][] findStartEnd(int[][] grid) {
        int[][] rst = new int[3][2];
        for (int i=0; i<grid.length; i++) {
            for (int j=0; j<grid[0].length; j++) {
                if (grid[i][j] == 1 || grid[i][j] == 2) {
                    rst[grid[i][j]-1][0] = i; 
                    rst[grid[i][j]-1][1] = j;
                } else if (grid[i][j] == 0){ //
                    rst[2][0]++;
                }                                
            }
        }
       return rst; 
    }    
}
